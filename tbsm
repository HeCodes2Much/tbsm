#!/usr/bin/env bash
#-*-coding:utf-8 -*-
#Auto updated?
#   Yes
#File :
#   tbsm
#Author :
#   The-Repo-Club [wayne6324@gmail.com]
#Github :
#   https://github.com/The-Repo-Club/
#
#Created:
#   Sat 22 January 2022, 03:03:50 PM [GMT]
#Modified:
#   Sat 22 January 2022, 03:21:32 PM [GMT]
#
#Description:
#   A pure bash session and application launcher
#
#Dependencies:
#   bash
#
# shellcheck disable=2034

declare -r myName="tbsm"
# declare -r myLongName="Terminal Based Session Manager"
declare -r myVersion="2021.11.08"
declare -r myDescription="A pure bash session and application launcher"
# declare -r systemConfigDir="/etc/xdg/${myName}"
declare -r configDir="${HOME}/.config/${myName}"
# declare -r installPfad=""
declare runInTTY="yes"
declare XserverArg="@Xdisplay@ -nolisten tcp"
declare protectedVerbose
declare lastSession
# declare -i lastSessionIndex
declare defaultSession
# declare -i defaultSessionIndex
declare -a binList=()
declare -a nameList=()
declare -a flagList=()
declare -a linkList=()
declare -a blacklist=()
declare -a argList=("$@")
declare command
declare argument
declare -a cmdStack=()
declare verboseLevel="3"

# More about colors at Arch Wiki
# https://wiki.archlinux.org/index.php/Color_Bash_Prompt
#
# Don't use double quotes here!
# Text attributes
declare -r txtClean=$'\e[0m'  # All attributes off
declare -r txtBold=$'\e[1m'   # Or bright, depend on your terminal
declare -r txtUScore=$'\e[4m' # Underscore
declare -r txtBlink=$'\e[5m'
declare -r txtRVideo=$'\e[7m' # Reverse video
declare -r txtHide=$'\e[8m'   # Concealed, very useful here...
declare -r txtWipe=$'\ec'     # Clear the screen

# Foreground colors only. Someone sicko may miss backgroud colors
declare -r colBlack=$'\e[30m'
declare -r colRed=$'\e[31m'
declare -r colGreen=$'\e[32m'
declare -r colYello=$'\e[33m'
declare -r colBlue=$'\e[34m'
declare -r colMagenta=$'\e[35m'
declare -r colArchBlue=$'\e[36m' # Well, someone may call it Cyan
declare -r colWhite=$'\e[37m'
# Other theme related variables see near end of file, search for 'default theme'

pushCommand() {
    [[ -z "${1}" ]] && return

    # Push all arguments in reverse order on the stack
    # https://stackoverflow.com/a/32647351
    for ((i = $#; i > 0; i--)); do
        cmdStack+=("${!i}")
    done
}

popCommand() {
    # Return codes are:
    #   0 You have data
    #   1 No more data

    local last=(${#cmdStack[@]}-1)

    command=""
    # shellcheck disable=2128
    [[ "${last}" -lt 0 ]] && return 1
    # shellcheck disable=2128
    command="${cmdStack[${last}]}"
    cmdStack=("${cmdStack[@]:0:last}")
}

popArgument() {
    # Return codes are:
    #   0 You have data
    #   1 No more data

    # We could use popCommand here and test if there is "quit" but then we have to
    # to re-push it. That's why we code all again

    local last=(${#cmdStack[@]}-1)

    argument=""

    # shellcheck disable=2128
    [[ "${last}" -lt 0 ]] && return 1
    # shellcheck disable=2128
    [[ "${cmdStack[${last}]}" == "quit" ]] && return 1
    # shellcheck disable=2128
    argument="${cmdStack[${last}]}"
    cmdStack=("${cmdStack[@]:0:last}")
}

popListIndex() {
    # Return codes are:
    #   0 You have data
    #   1 No more data
    #   2 Bad data

    popArgument || return 1

    [[ "${#linkList[@]}" -eq "0" ]] && fillLists

    if [[ ! ("${argument}" =~ ^[1-9]+[0-9]*$) ]]; then
        # Not a (valid) number, we assume it's the next command
        pushCommand "$argument"
        return 1
    elif [[ "$argument" -gt "${#linkList[@]}" ]]; then
        error "${FUNCNAME[-2]:3}: Selection number too big: ${argument}"
        return 2
    fi

    listIndex=$((argument - 1))
}

hasOption() { [[ "${argList[*]}" == *"--$1"* ]]; }

# It's better not to use echo
# http://unix.stackexchange.com/a/65819
print() {
    local vl=${2:-"0"}
    [[ ${verboseLevel} -gt $vl ]] && printf "%s\n" "$1"
}

info() {
    local prefix=${infoPrefix:-" ${txtBold}i${txtClean} ${myName}: "}
    local vl=${2:-"2"}
    [[ ${verboseLevel} -gt $vl ]] && print "${prefix}$1" >&2
}

warn() {
    local prefix=${warnPrefix:-" ${colYello}W${txtClean} ${myName}: "}
    local vl=${2:-"1"}
    [[ ${verboseLevel} -gt $vl ]] && print "${prefix}$1" >&2
}

error() {
    local prefix=${errorPrefix:-" ${colRed}E${txtClean} ${myName}: "}
    print "${prefix}$1" >&2
}

exitNormal() {
    [[ -n "$1" ]] && print "$*"
    exit 0
}
exitError() {
    error "$*"
    exit 1
}
exitCancel() {
    error "$*"
    exit 2
}

checkConfigDir() {
    [[ -d "${configDir}" ]] && return

    mkdir -p "${configDir}"/{blacklist,themes,whitelist}
    info "Created config directory: ${configDir}"
}

clearLists() {
    binList=()
    nameList=()
    flagList=()
    linkList=()
    [[ "$1" != "keepBlack" ]] && blacklist=()
}

setDefaultAndLast() {
    clearLists
    readDesktopFiles "${configDir}"
    defaultSession="${linkList[0]}"
    lastSession="${linkList[1]}"
}

fillBlacklist() {
    clearLists
    readDesktopFiles "${configDir}/blacklist"
    blacklist=("${linkList[@]}")
}

fillLists() {
    local -a sessionPfads=(/usr/share/xsessions)
    local missingSessionPfads
    local -r warnOnly="true"

    setDefaultAndLast
    fillBlacklist
    clearLists "keepBlack"

    for pfad in "${sessionPfads[@]}"; do
        readDesktopFiles "$pfad" "$warnOnly"
        missingSessionPfads+="$?"
    done
    if [[ $missingSessionPfads -eq ${#sessionPfads[@]} ]]; then
        warn "${FUNCNAME[0]}: No session paths found"
    fi

    readDesktopFiles "${configDir}/whitelist"
}

parseDesktopFiles() {
    local execKey
    local nameKey
    local binItem
    local realLink
    local flag
    local val

    # TODO: allow full quoting and expansion according to desktop entry spec:
    # http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#exec-variables

    for ((count = 0; count < ${#desktopFiles[@]}; count++)); do
        # Filter blacklisted entries
        realLink=("$(readlink -m "${desktopFiles[${count}]}")")
        # http://stackoverflow.com/a/15394738
        # shellcheck disable=2128
        [[ ${blacklist[*]} =~ ${realLink} ]] && continue

        # TryExec key is there to determine if executable is present,
        # but as we are going to test the Exec key anyway, we ignore it.
        # http://stackoverflow.com/a/22550813
        execKey=$(sed -nr '/^\[Desktop Entry\]/,/^\[/{s/^Exec=//p}' "${desktopFiles[${count}]}")
        nameKey=$(sed -nr '/^\[Desktop Entry\]/,/^\[/{s/^Name=//p}' "${desktopFiles[${count}]}")
        # Sadly have only the plasma.desktop file an entry with "Type=XSession", all
        # other (sorry, the few I have seen) says "Type=Application", so work around this
        flag="X"
        # shellcheck disable=2128
        if [[ $realLink == *"xsessions"* ]]; then
            flag="S" # Treat all in /usr/share/xsessions as such
        elif [[ $realLink == *"wayland-sessions"* ]]; then
            flag="W" # Treat all in /usr/share/wayland-sessions as such
        else
            val=$(sed -nr '/^\[Desktop Entry\]/,/^\[/{s/^Type=//p}' "${desktopFiles[${count}]}")
            if [[ "${val}" == "XSession" ]]; then
                flag="S" # Takes action when there is a real local file, not a link
            else
                val=$(sed -nr '/^\[Desktop Entry\]/,/^\[/{s/^Terminal=//p}' "${desktopFiles[${count}]}")
                [[ "${val}" == "true" ]] && flag="C"
            fi
        fi
        if [[ -n ${execKey} && -n ${nameKey} ]]; then
            # The .desktop files allow there Exec keys to use $PATH lookup.
            binItem="$(which "${execKey%%[ ]*}" 2>/dev/null)"
            # If which fails to return valid path, skip to next .desktop file.
            if [[ ! $? ]]; then
                warn "Skip '$nameKey' Binary found not: ${execKey%%[ ]*}"
                continue
            fi
            binList+=("${binItem} ${execKey#*"${execKey%%[ ]*}"}")
            flagList+=("${flag}")
            if [[ "$flag" == "W" ]] && [[ " ${nameList[*]}" =~ ${nameKey} ]]; then
                nameList+=("${nameKey} (Wayland)")
            else
                nameList+=("${nameKey}")
            fi
            # shellcheck disable=2128
            linkList+=("${realLink}")
        fi
    done
}

readDesktopFiles() {
    local filePfad="$1" # e.g. /usr/share/xsessions/
    local warnOnly="$2"
    local -a desktopFiles

    if [[ -d "${filePfad}" ]]; then
        # Given -maxdepth 1 to fix trouble at storing default/lastSession
        # links above blacklist/whitelist directorys
        # Why use -regex and not -name ?
        # shellcheck disable=2207 # This is needed and breaks with ""
        desktopFiles=($(find "${filePfad}" -maxdepth 1 -regex .\*.desktop | sort))
        parseDesktopFiles
    else
        if [[ ${warnOnly} ]]; then
            warn "${FUNCNAME[0]}: Path not found: ${filePfad}" "2"
        else
            error "${FUNCNAME[0]}: Path not found: ${filePfad}"
        fi
        return 1
    fi
}

cmdSearch() {
    local filePfad="/usr/share/applications"
    local -a desktopFiles

    if ! popArgument; then
        error "${FUNCNAME[0]:3} needs a pattern"
        return 1
    fi
    pattern="$argument"

    clearLists

    if [[ -d "${filePfad}" ]]; then
        # shellcheck disable=2207 # This is needed and breaks with ""
        desktopFiles=($(grep -Ril --include="*.desktop" "$pattern" "$filePfad" | sort))
        info "Found matches: ${#desktopFiles[@]}"
        parseDesktopFiles
    else
        error "${FUNCNAME[0]:3}: Pfad not found: ${filePfad}"
    fi

    print "Applications matching '$pattern'"
    printMenuList
}

printMenuHeader() {
    # When called without argument set title to menuTitle
    if [[ ! "${noMenuHeader}" ]]; then
        print "${menuSeparator}${txtNormal}"
        print "${menuTitle}"
        print "${menuSeparator}${txtNormal}"
    fi
}

printMenuFooter() {
    print "${menuSeparator}${txtNormal}"
}

printMenuList() {
    if [[ "${#nameList[@]}" == "0" ]]; then
        print "  Nothing to list"
        return
    fi

    for ((count = 0; count < ${#nameList[@]}; count++)); do
        print "${colArchBlue} $((count + 1)): ${colGreen}${nameList[${count}]} ${colWhite}"
    done
}

runSession() {
    local -i listIndex="$1"
    local bin=${binList[${listIndex}]}
    local waylandSessionArgs

    [[ ${listIndex} -lt 0 ]] && error "Session number too small" && return 1
    [[ ${listIndex} -gt ${#nameList[@]}-1 ]] && error "Session number too big" && return 1

    info "Run session: ${nameList[listIndex]}"

    # Run $bin according to its flag.
    case ${flagList[${listIndex}]} in
    C) # Console programs
        info "Run command: ${bin[*]}"
        "${bin[@]}"
        ;;
    S) # X Sessions
        if [[ $runInTTY ]]; then
            info "Run command: startx ${bin[*]} -- ${XserverArg[*]}"
            desktop="${bin%[[:space:]]*}"
            if [ -f "$HOME/.xinitrc" ]; then
                # shellcheck disable=1091
                source "${HOME}"/.xinitrc
            fi
            DESKTOP_SESSION="${desktop##*/}" startx "${bin[@]}" -- "${XserverArg[@]}"
        else
            info "Not running in tty. Will not start X session." "0"
            return 1
        fi
        ;;
    W) # Wayland Sessions
        if [[ $runInTTY ]]; then
            [[ "${bin[*]}" =~ (^| )(/.*/)?dbus-run-session( |$) ]] ||
                waylandSessionArgs+=$(which dbus-run-session 2>/dev/null)
            info "Run command: XDG_SESSION_TYPE=wayland ${waylandSessionArgs:+${waylandSessionArgs[@]} }${bin[*]}"
            XDG_SESSION_TYPE=wayland ${waylandSessionArgs:+${waylandSessionArgs[@]} }"${bin[*]}"
        else
            info "Not running in tty. Will not start Wayland session." "0"
            return 1
        fi
        ;;
    X) # Applications
        if [[ $runInTTY ]]; then
            info "Run command: startx ${bin[*]} -- ${XserverArg[*]}"
            startx "${bin[@]}" -- "${XserverArg[@]}"
        else
            info "Not running in tty, run: ${bin[*]}"
            "${bin[@]}"
        fi
        ;;
    -) # Old cdm/tdm stuff, not used
        exitNormal "Have a nice day"
        ;;
    *) # Old cdm/tdm stuff, should never happens
        exitError "Unknown flag: ${flagList[${listIndex}]}"
        ;;
    esac

    # Exit or not. Show full menu if no command left
    if popCommand; then
        pushCommand "${command}"
    else
        pushCommand "menu"
    fi
}

showQuickMenu() {
    setDefaultAndLast

    if [[ -z "${defaultSession}" ]]; then
        pushCommand "menu"
        return
    fi

    local menuText
    menuText="${promptCol}${quickPrompt}${txtNormal} [*]"
    [[ -n "${defaultSession}" ]] && menuText=("${menuText}  [!]${nameList[0]}")
    # shellcheck disable=2128
    [[ -n "${lastSession}" && "${lastSession}" != "${defaultSession}" ]] && menuText=("${menuText} [ ]${nameList[1]}")

    # shellcheck disable=2128
    menuTextVal="${menuText} "

    read -er -i "!" -p "${menuTextVal}" userInput

    if [[ "${userInput}" == "!" ]]; then
        runSession "0"
    elif [[ -z "${userInput}" ]]; then
        runSession "1"
    else
        # Don't quote here or it will not work as intended
        pushCommand "${userInput#!}"
    fi
}

showMenu() {
    printMenuHeader
    printMenuList
    printMenuFooter
}

addToList() {
    local list="$1"
    local -i ok=0
    local -i err=0

    while :; do
        popListIndex
        case $? in
        1) break ;; # No more left
        2)
            err=1
            continue
            ;; # Error but we ignore it
        esac

        if [[ "${linkList[${listIndex}]}" == "-" ]]; then
            warn "Session can't ${list}ed: ${nameList[${listIndex}]}"
            continue
        fi

        ln -sf "${linkList[${listIndex}]}" "${configDir}/${list}/"
        info "Session ${list}ed: ${nameList[${listIndex}]}" "1"
        ok=1
    done

    if (! $ok); then
        # FUNCNAME is a build in bash array. We cut leading 3 char "cmd"
        error "${FUNCNAME[1]:3} need a valid session number"
        return 1
    fi
}

removeFromList() {
    local list="$1"
    local file
    local link
    local -i ok=0
    local -i err=0

    # Ensure popListIndex works as desired
    clearLists
    readDesktopFiles "${configDir}/${list}"

    while :; do
        popListIndex
        case $? in
        1) break ;; # No more left
        2)
            err=1
            continue
            ;; # Error but we ignore it
        esac

        for file in "${configDir}"/"${list}"/*; do
            link=("$(readlink -m "${file}")")
            # shellcheck disable=2128
            if [[ "${link}" == "${linkList[${listIndex}]}" ]]; then
                unlink "$file"
                info "Session removed from ${list}: ${nameList[${listIndex}]}" "1"
            fi
        done
        ok=1

    done

    if (! $ok || $err); then
        # FUNCNAME is a build in bash array. We cut leading 3 char "cmd"
        error "${FUNCNAME[1]:3} needs a valid session number"
        return 1
    fi
}

cmdBlacklist() {
    case "$1" in
    add) addToList "blacklist" ;;
    remove) removeFromList "blacklist" ;;
    *) exitError "FATAL: Not handeld by cmdBlacklist: $1" ;;
    esac
}

cmdDefault() {
    popListIndex
    case $? in
    1)
        error "Command default needs a number"
        return 1
        ;;
    2) return 1 ;;
    esac

    if [[ "${linkList[${listIndex}]}" == "-" ]]; then
        warn "Session can't saved as default: ${nameList[${listIndex}]}"
        return
    fi

    ln -sf -T "${linkList[${listIndex}]}" "${configDir}/000-default-session.desktop"
    info "New default session: ${nameList[${listIndex}]}" "1"
    sleep 1
}

cmdDoc() {
    local doc
    local docMatch
    local docPath="/usr/share/doc/tbsm"

    popArgument
    # shellcheck disable=2207 # This is needed and breaks with ""
    docMatch=($(find "${docPath}" -not -type d -iname \*"${argument}"\* | sort))
    # shellcheck disable=2128
    if [[ ${#docMatch[@]} -gt 1 ]]; then
        print "Available documentation:"
        for doc in "${docMatch[@]}"; do
            doc="${doc#*/??_}"
            print "  ${doc%.*}"
        done
    elif [[ -z "$docMatch" ]]; then
        print "No manual match '${argument}'"
    else
        less "$docMatch"
    fi
}

cmdHelp() {
    local tab=$'\t'
    local ind="  " # indent
    local showFullHelp="false"

    popArgument

    if [[ -z "${argument}" ]]; then
        showFullHelp="true"
    fi

    if [[ "${showFullHelp}" == "true" ]]; then
        print "This is ${myName} (v${myVersion}) - ${myDescription}"
        print "Usage:"
        print "${ind}${myName} [COMMAND [argument..]] [OPTION [argument..] ..]"
        print
        print "COMMANDs are:"
    else
        print "Available commands:"
    fi
    print "${ind}blacklist, b <n..>${tab}Add/remove entries on the Blacklist. Use -b to remove"
    print "${ind}default, d <n>${tab}Save session as the default session"
    print "${ind}doc [pattern]${tab}${tab}List or show documentation files"
    print "${ind}exit, X${tab}${tab}Logout from tty or quit"
    if [[ "${showFullHelp}" == "true" ]]; then
        print "${ind}help, h${tab}${tab}You read it now"
    else
        print "${ind}help, h${tab}${tab}You used '${argument}' so try it for some more info"
    fi
    print "${ind}list, l [b|c|w]${tab}List entries. Current, config or black-/whitelist"
    print "${ind}menu, m${tab}${tab}Show the full session menu"
    print "${ind}quick-menu, qm${tab}Show the quick menu to select default or last session"
    print "${ind}quit, q${tab}${tab}Hasta la vista, Baby!"
    print "${ind}run, r <n>${tab}${tab}Run the given session number"
    print "${ind}search, s <pattern>${tab}Search an application of your interest"
    print "${ind}whitelist, w <n..>${tab}Add/remove entries on the Whitelist. Use -w to remove"
    print "For your convenience there are some short hands: lb lc lw <n> ?"
    if [[ "${showFullHelp}" == "true" ]]; then
        print
        print "OPTIONs are prefixed by a double hyphen, they are:"
        print "${ind}info  ${tab}${tab}Give some feedback what is going on"
        print "${ind}quiet ${tab}${tab}Shut up!"
        print "${ind}silent${tab}${tab}Be reticent"
        print "${ind}theme <name>${tab}${tab}Use given extra configuration file in <configDir>/theme/"
        print "${ind}verbose${tab}${tab}Tell me more"
        print
        print "Examples:"
        print "Run a session whose number you know"
        print "${ind}${myName} run 3"
        print "Run with main menu and give a comprehensive feed back"
        print "${ind}${myName} --verbose"
        print "Run with qick start menu"
        print "${ind}${myName} quick-menu"
        #       print "${ind}${myName}"
        #       print "${ind}${tab}"
    fi
}

cmdList() {
    local title

    popArgument
    case "${argument}" in
    b)
        fillBlacklist
        title="Black listed entries:"
        ;;
    c)
        fillLists
        title="Current configuration:"
        ;;
    w)
        clearLists
        readDesktopFiles "${configDir}/whitelist"
        title="White listed entries:"
        ;;
    *)
        if [[ "${#nameList[@]}" == "0" ]]; then
            pushCommand "list" "c"
            return
        else
            title="Currently loaded list:"
        fi
        ;;
    esac

    # No showMenu here, keep the theme away and list it simple
    print "${title}"
    printMenuList
}

cmdLogout() {
    if [[ $runInTTY ]]; then
        # Logout is not easy from inside a script. Can you do it better?
        myPid=$$
        kill -SIGHUP "$(ps -ef | awk '($2=="'$myPid'"){print $3}')"
    else
        exitNormal
    fi
}

cmdMenu() {
    clearCommands
    fillLists
    showMenu
}

cmdQMenu() {
    clearCommands
    showQuickMenu
}

cmdRun() {
    popListIndex
    case $? in
    1)
        error "Command run needs a number"
        return 1
        ;;
    2) return 1 ;;
    esac

    # When user choose 'Drop to Shell' there is no .desktop file to link
    if [[ "${linkList[${listIndex}]}" != "-" ]]; then
        # Don't save default as last session
        if [[ "${defaultSession}" != "${linkList[${listIndex}]}" ]]; then
            ln -sf -T "${linkList[${listIndex}]}" "${configDir}/001-last-session.desktop"
        fi

        if [[ -z "${defaultSession}" ]]; then
            pushCommand "$((listIndex + 1))"
            cmdDefault
        fi
    fi

    runSession "${listIndex}"
}

cmdWhitelist() {
    case "$1" in
    add) addToList "whitelist" ;;
    remove) removeFromList "whitelist" ;;
    *) exitError "FATAL: Not handeld by cmdWhitelist: $1" ;;
    esac
}

parmOfOption() {
    local -i i=0

    while
        [[ $i < ${#argList[@]} ]]
    do
        [[ "${argList[$i]}" == "--$1" ]] && break
        ((++i))
    done

    if ((++i < ${#argList[@]})); then
        echo "${argList[$i]}"
    fi
}

noMoreCommand() { [[ "${#cmdStack[@]}" == "0" ]]; }
clearCommands() { cmdStack=(); }

prompt() {
    local promptText="${promptCol}${menuPrompt}${txtNormal}"

    while noMoreCommand; do
        # We want to give a hint after a while, but because in meanwhile
        # the user may write down his command the input would discard.
        # That's why we wait for the first key stroke
        # FIXME: With -e is a new line printed after key stroke
        read -sr -n 1 -t 12 -p "${promptText} " userInput
        if [[ $? -gt 128 ]]; then
            print $'\r'"${menuHint} 1-${#nameList[@]} b d l m qm q r s w X ?"
        elif [[ -z "${userInput}" ]]; then
            pushCommand "quick-menu"
            echo
            continue
        elif [[ ! ("$userInput" =~ ^[-a-zX0-9?]) ]]; then
            userInput=""
            # Flush keyboard if e.q. cursor key was pressed
            # http://superuser.com/a/364421
            read -rt 0.01 -n 100
            printf $'\r'
            continue
        fi

        printf $'\r'
        # http://stackoverflow.com/a/25000195
        read -erp "${promptText} " -i "$userInput" -a userInput
        # shellcheck disable=2128
        if [[ -z "${userInput}" ]]; then
            pushCommand "quick-menu"
        elif [[ "${userInput[0]}" =~ ^[1-9]*[0-9]+$ ]]; then
            pushCommand "run" "${userInput[0]}"

            # Ignore any input not matched a normal char, hyphen or the ?
            # Why? Why not?
        elif [[ "${userInput[0]}" =~ ^(\?|-*|[a-z]+$) ]]; then
            pushCommand "${userInput[@]}"

            # FIXME: Find a solution not to print a newline with 'read -e'
            #        and stay on the line. Could be done in a loop reading only one char
            # like above in our first read step to show the hint at time out
            #else
            #  printf $'\r'
        fi
    done
}

#
# Let's get ready to rumble!
#

hasOption "verbose" && protectedVerbose=("3")
hasOption "info" && protectedVerbose=("2")
hasOption "silent" && protectedVerbose=("1")
hasOption "quiet" && protectedVerbose=("0")
declare -r protectedVerbose # Now he fit his name
[[ -n "${protectedVerbose}" ]] && verboseLevel=("${protectedVerbose}")

checkConfigDir
# Remove silently dead links in case something was deinstalled
# https://unix.stackexchange.com/a/38691
find "$configDir" -type l -exec test ! -e {} \; -exec unlink {} \;

# FIXME: Do you know a way to "re-eval" strings with variables in it so we can
#        simple 'declare' all these on top of file but have effect if a config
#        file change e.g. a color?
# Our default theme has to be modest, but should showcase the possibilities
[[ -z "$txtNormal" ]] && txtNormal="${txtClean}" # The reset key to show ordinary text
[[ -z "$tbsmColor" ]] && tbsmColor="${colArchBlue}${txtBold}"
[[ -z "$promptCol" ]] && promptCol="${txtBold}"
[[ -z "$menuTitle" ]] && menuTitle="${tbsmColor}T${txtNormal}erminal ${tbsmColor}B${txtNormal}ased ${tbsmColor}S${txtNormal}ession ${tbsmColor}M${txtNormal}anager (${tbsmColor}${myName}${txtNormal} v${myVersion})"
[[ -z "$menuSeparator" ]] && menuSeparator="--------------------------------------------------"
[[ -z "$menuPrompt" ]] && menuPrompt="${myName}:"
[[ -z "$menuHint" ]] && menuHint="${tbsmColor}Hint:${txtNormal}"
[[ -z "$quickPrompt" ]] && quickPrompt="${myName}:${txtNormal} What's next?"
[[ -z "$infoPrefix" ]] && infoPrefix=" ${tbsmColor}i${txtNormal} ${myName}: "
[[ -z "$warnPrefix" ]] && warnPrefix=" ${colYello}W${txtNormal} ${myName}: "
[[ -z "$errorPrefix" ]] && errorPrefix=" ${colRed}E${txtNormal} ${myName}: "

# Check if running in tty and set X displaynumber
runInTTY=$(tty)
if [[ ! "$runInTTY" =~ /dev/tty[0-9] ]]; then
    unset runInTTY
else
    # Replace @Xdisplay@ with e.g. :1
    XserverArg=${XserverArg/@Xdisplay@/:${runInTTY#/dev/tty}}
fi

# Special handling to support GNU style help
if [[ "${1}" == "--help" ]]; then
    pushCommand "quit"
    pushCommand "--help"
    # If no command given (-z) or starts with "--" show menu
elif [[ -z "${1}" || "${1}" == --* ]]; then
    pushCommand "menu"
else
    pushCommand "quit"

    # Remove every option from the command line
    # FIXME: Did you got it without to copy in a help variable?
    IamToStupid="$*"
    IamToStupid="${IamToStupid%%--*}"
    # Don't quote here or it will not work as desired
    pushCommand "${IamToStupid[@]}"
fi

#
# Hey! Ho! Let's Go!
#
while popCommand; do
    case "${command}" in
    blacklist | b) cmdBlacklist "add" ;;
    -blacklist | -b) cmdBlacklist "remove" ;;
    doc) cmdDoc ;;
    default | d) cmdDefault ;;
    help | --help | h) cmdHelp ;;
    list | l) cmdList ;;
    menu | m) cmdMenu ;;
    quick-menu | qm) cmdQMenu ;;
    quit | q) exitNormal ;;
    run | r) cmdRun ;;
    search | s) cmdSearch ;;
    whitelist | w) cmdWhitelist "add" ;;
    -whitelist | -w) cmdWhitelist "remove" ;;
    exit | X) cmdLogout ;;

    # Short hands
    \? | -\? | -h) pushCommand "help" "${command}" ;;
    lb) pushCommand "list" "b" ;;
    lw) pushCommand "list" "w" ;;
    lc) pushCommand "list" "c" ;;
    [1-9] | [1-9][0-9])
        pushCommand "run" "$command"
        ;;

    # Try to catch lazy written b w commands
    [bw][1-9]) pushCommand "${command:0:1}" "${command:1}" ;;
    -[bw][1-9]) pushCommand "${command:0:2}" "${command:2}" ;;

    *) error "Unknown command: ${command}" ;;
    esac
    prompt
done
