#!/usr/bin/env bash
#-*-coding:utf-8 -*-
#Auto updated?
#   Yes
#File :
#   file.sh
#Author :
#   The-Repo-Club [wayne6324@gmail.com]
#Github :
#   https://github.com/The-Repo-Club/
#
#Created:
#   Sat 22 January 2022, 10:40:16 PM [GMT]
#Modified:
#   Sun 23 January 2022, 02:42:42 PM [GMT]
#
#Description:
#   start desktop environment in tty!
#
#Dependencies:
#   bash
#

# shellcheck source=/dev/null
configPath="$HOME/.config/tbsm/"
configFile="$HOME/.config/tbsm/config"
if [ -e $configFile ]; then
    source $configFile
else
    mkdir -p $configPath && touch $configFile
fi

# set colors
resetColor=$(tput sgr0)
boldText=$(tput bold)

#background main page
sysPageColor="40"

# color name text desktop and ....
InfoDesktop="34"

colorBtnSelection="35"

#item color ; info message
ItemColorSelect="32"
# normal text color
normalTextColor=$(tput setaf 5)
# banner color
bannerTextColor=$(tput setaf 3)
# important text color
importantTextColor=$(tput setaf 2)
# information text color
informationTextColor=$(tput setaf 7)

# set variables for system status
[[ -z $showStatus ]] && showStatus=1
[[ -z $showUserAtHost ]] && showUserAtHost=1
[[ -z $showLinuxVersion ]] && showLinuxVersion=1
[[ -z $showTime ]] && showTime=1
[[ -z $showLinuxDisName ]] && showLinuxDistName=1
[[ -z $showUptime ]] && showUptime=1

# don't run xinitrc by default
[[ -z $runXinitrc ]] && runXinitrc=0

#move cursor in terminal
function gotoxy {
    printf "\33[%d;%df%s" "$2" "$1" "$3"
}
# clear page with color and background color changer
function pageColor {
    w=$(tput cols)
    h=$(tput lines)
    printf "\e[%dm" "$1"
    if [[ "$2" == "clear" ]]; then
        for y in $(seq $h); do
            for x in $(seq $w); do
                gotoxy "$x" "$y" " "
            done
        done
        gotoxy "0" "0" " "
    fi
}

# spaces function center text in space
function spaces {
    txt="$1"
    num="$2"
    len=${#txt}
    len=$((len / 2))
    offset=$((num - len))
    offset=$((offset / 2))
    space=">"
    for ((i = 1; i < offset; i++)); do
        space=$(echo "$space ")
    done

    space=$(echo "${space}${txt}")

    for ((i = 1; i < offset; i++)); do
        space=$(echo "$space ")
    done
    space=$(echo "$space<")
    printf "%s" "$space"
}

# set location text in center spaces
centerText() {
    pageColor "$sysPageColor"
    w=$(stty size | cut -d" " -f2)
    b=$(echo $1 | sed -e 's/\${.*}//g')
    l=${#b}
    printf "%"$((((w / 2) + l) - (l / 3)))"s" "$1"
}

# move cursor to new line
newline() {
    echo ""
}

# function to print the text in the center of screen
function center {
    pageColor "$sysPageColor"
    termwidth="$(stty size | cut -d" " -f2)"
    padding="$(printf '%0.0000001s' ' '{1..500})"
    printf '%*.*s %s %*.*s\n' 0 "$(((termwidth - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((termwidth - 1 - ${#1}) / 2))" "$padding"
}

# function to create a select menu from an array
# i didn't write this function! : https://unix.stackexchange.com/questions/146570/arrow-key-enter-menu -> Alexander Klimetschek
# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function selectOption {
    # little helpers for terminal print control and key input
    ESC=$(printf "\033")
    cursor_blink_on() { printf "${ESC}[?25h"; }
    cursor_blink_off() { printf "${ESC}[?25l"; }
    cursor_to() { printf "${ESC}[$1;${2:-1}H"; }
    print_selected() {
        text=$(spaces "$1" "60")
        air=$(sed -e 's/[^ <>]/ /g' <<<$text)
        center "         ${ESC}[7m$air${ESC}[27m"
        center "         ${ESC}[7m$text${ESC}[27m"
        center "         ${ESC}[7m$air${ESC}[27m"
    }
    get_cursor_row() {
        IFS=';' read -sdR -p $'\E[6n' ROW COL
        echo ${ROW#*[}
    }
    key_input() {
        read -s -n3 key 2>/dev/null >&2
        if [[ $key = ${ESC}[A ||
            $key = ${ESC}[0A ||
            $key = ${ESC}[D ||
            $key = ${ESC}[0D ]]; then echo up; fi

        if [[ $key = ${ESC}[B ||
            $key = ${ESC}[0B ||
            $key = ${ESC}[C ||
            $key = ${ESC}[0C ]]; then echo down; fi

        if [[ $key = "" ]]; then echo enter; fi
    }
    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done
    # determine current screen position for overwriting the options
    local lastrow=$(get_cursor_row)
    local startrow=$((lastrow - $#))
    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off
    stty -echo
    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            if [ $idx -eq $selected ]; then

                cursor_to $((startrow))
                printf "\33[0;%dm" "$InfoDesktop"
                center "You've selected : "$((selected + 1))"/$#"

                cursor_to $((startrow + 2))
                colorItemSelection=$(printf "\e[%dm" "$ItemColorSelect")
                colorpage=$(printf "\e[0;%d;%dm" "$sysPageColor" "$InfoDesktop")
                optionsInfo=$(echo -ne "\b\b{${options[*]}}" | sed 's/ / , /g' | sed 's/{/{ /g' | sed 's/}/ }/g')
                selectionItem=$(sed -e "s/ $opt /${boldText}${colorItemSelection}&${colorpage}/" <<<$optionsInfo)
                centerText "${selectionItem}"

                cursor_to $((startrow + 5))
                printf "\33[%dm" "$colorBtnSelection"
                print_selected "$opt"
                printf "\33[0m"

            fi
            ((idx++))
        done
        # user key control
        case $(key_input) in
        enter) break ;;
        up)
            ((selected--))
            if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi
            ;;
        down)
            ((selected++))
            if [ $selected -ge $# ]; then selected=0; fi
            ;;
        esac
    done
    # cursor position back to normal
    cursor_to $((lastrow + 1))
    printf "\n"
    cursor_blink_on
    # return the selected index
    stty echo
    return $selected
}

# get the uptime of the system
getuptime() {
    uptime -p >/dev/null 2>&1

    if [ "$?" -eq 0 ]; then
        # Supports most Linux distro
        # when the machine is up for less than '0' minutes then
        # 'uptime -p' returns ONLY 'up', so we need to set a default value
        UP_SET_OR_EMPTY=$(uptime -p | awk -F 'up ' '{print $2}')
        UP=${UP_SET_OR_EMPTY:-'less than a minute'}
    else
        # Supports Mac OS X, Debian 7, etc
        UP=$(uptime | sed -E 's/^[^,]*up *//; s/mins/minutes/; s/hrs?/hours/;
        s/([[:digit:]]+):0?([[:digit:]]+)/\1 hours, \2 minutes/;
        s/^1 hours/1 hour/; s/ 1 hours/ 1 hour/;
        s/min,/minutes,/; s/ 0 minutes,/ less than a minute,/; s/ 1 minutes/ 1 minute/;
        s/  / /; s/, *[[:digit:]]* users?.*//')
    fi

    echo "$UP"
}

# function to print system status
function systemStatus {
    if [[ $showStatus -eq 1 ]]; then
        # start prining color
        echo "${informationTextColor}"
        # print user@host
        [[ $showUserAtHost -eq 1 ]] && center "$USER@$(uname -n)"
        # check kernel release
        [[ $showLinuxVersion -eq 1 ]] && center "$(uname -s -r)"
        # print time
        [[ $showTime -eq 1 ]] && center "$(date +'%d %B %Y %I:%M %p')"
        if [[ $showLinuxDistName -eq 1 ]]; then
            # check OS release version and name
            if [ -f /etc/os-release ]; then
                # freedesktop.org and systemd
                source /etc/os-release
                operatingSystem=$NAME
                operatingSystemVersion=$VERSION_ID
            elif type lsb_release >/dev/null 2>&1; then
                # linuxbase.org
                operatingSystem=$(lsb_release -si)
                operatingSystemVersion=$(lsb_release -sr)
            elif [ -f /etc/lsb-release ]; then
                # For some versions of Debian/Ubuntu without lsb_release command
                source /etc/lsb-release
                operatingSystem=$DISTRIB_ID
                operatingSystemVersion=$DISTRIB_RELEASE
            elif [ -f /etc/debian_version ]; then
                # Older Debian/Ubuntu/etc.
                operatingSystem=Debian
                operatingSystemVersion=$(cat /etc/debian_version)
            else
                # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
                operatingSystem=$(uname -s)
                operatingSystemVersion=$(uname -r)
            fi
            center "$operatingSystem $operatingSystemVersion"
        fi
        # print uptime
        [[ $showUptime -eq 1 ]] && center "$(getuptime)"
        # reset the color
        echo "${resetColor}"
    fi
}

# function to print banner
function printBanner {
    #clear and change background page
    # pageColor "$sysPageColor" "clear"

    echo -e "\n${boldText}${bannerTextColor}"
    center "████████╗██████╗ ███████╗███╗   ███╗"
    center "╚══██╔══╝██╔══██╗██╔════╝████╗ ████║"
    center "   ██║   ██████╔╝███████╗██╔████╔██║"
    center "   ██║   ██╔══██╗╚════██║██║╚██╔╝██║"
    center "   ██║   ██████╔╝███████║██║ ╚═╝ ██║"
    center "   ╚═╝   ╚═════╝ ╚══════╝╚═╝     ╚═╝"
    echo "${resetColor}"
    systemStatus
}

# function to start desktop environment
function startDesktop {
    if [[ $1 == "TTY" ]]; then
        tput clear
        exec $SHELL
    elif [[ $1 == "reboot" ]]; then
        tput clear
        echo "REBOOTING..."
        sleep 3
        reboot
    elif [[ $1 == "shutdown" ]]; then
        tput clear
        echo "SHUTTING DOWN..."
        sleep 3
        shutdown -h now
    fi
    # start chosen desktop environment from Exec command in .desktop file!
    echo "${normalTextColor}starting $1 ! please wait... ${resetColor}"
    execCommand=$(which $(grep "^Exec" /usr/share/xsessions/"$1".desktop | sed 's/Exec=//'))
    # for debian systems
    if [[ "$runXinitrc" == 1 ]] && [[ -e "$HOME/.xsession" ]]; then
        DESKTOP_SESSION="$1" exec startx "$HOME/.xsession" "$execCommand"
    elif [[ "$runXinitrc" == 1 ]] && [[ -e "$HOME/.xinitrc" ]]; then
        DESKTOP_SESSION="$1" exec startx "$HOME/.xinitrc" "$execCommand"
    fi
    DESKTOP_SESSION="$1" exec startx "$execCommand"
}

# function to search in array elements
function containsElement {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

# function to create the menu list entries and configure them with config file
function menuEntries {
    # manual for user
    centerText "${normalTextColor} Select an entry using ${importantTextColor} up/down ${normalTextColor} or ${importantTextColor} left/right ${normalTextColor} keys and ${importantTextColor}enter${normalTextColor} to confirm: ${resetColor}"
    newline
    newline
    # get all installed graphical evironments
    desktops=$(ls /usr/share/xsessions/ | sed 's/.desktop//g')
    staticEntries=("TTY" "reboot" "shutdown")
    # set the options array as default
    options=($desktops ${staticEntries[@]})
    # create select menu from options
    selectOption "${options[@]}"
    # set the user choice
    choice=$?
    newUserChoice=${options[$choice]}
    # set user choice to use next time :
    containsElement $newUserChoice "${staticEntries[@]}"
    if [ $? -eq 1 ]; then
        if [[ $(grep "^lastUserChoice=" $configFile) ]]; then
            sed -i "s/lastUserChoice=\"$lastUserChoice\"/lastUserChoice=\"$newUserChoice\"/" $configFile
        elif [[ $(grep "^#lastUserChoice=" $configFile) ]]; then
            sed -i '/#lastUserChoice/d' $configFile
            echo -e "lastUserChoice=\"$newUserChoice\"" >>$configFile
        else
            echo -e "lastUserChoice=\"$newUserChoice\"" >>$configFile
        fi
    fi

}

# set the terminal colors
function setTermColors {
    if [ "$TERM" = "linux" ]; then
        printf %b '\e[40m' '\e[8]' # set default background to color 0 'dracula-bg'
        printf %b '\e[37m' '\e[8]' # set default foreground to color 7 'dracula-fg'
        printf %b '\e]P021222c'    # redefine 'black'          as 'dracula-bg'
        printf %b '\e]P86272a4'    # redefine 'bright-black'   as 'dracula-comment'
        printf %b '\e]P1ff5555'    # redefine 'red'            as 'dracula-red'
        printf %b '\e]P9ff6e6e'    # redefine 'bright-red'     as '#ff6e6e'
        printf %b '\e]P250fa7b'    # redefine 'green'          as 'dracula-green'
        printf %b '\e]PA69ff94'    # redefine 'bright-green'   as '#69ff94'
        printf %b '\e]P3f1fa8c'    # redefine 'yellow'         as 'dracula-yellow'
        printf %b '\e]PBffffa5'    # redefine 'bright-yellow'  as '#ffffa5'
        printf %b '\e]P4bd93f9'    # redefine 'blue'           as 'dracula-blue'
        printf %b '\e]PCd6acff'    # redefine 'bright-blue'    as '#cfa9ff'
        printf %b '\e]P5ff79c6'    # redefine 'magenta'        as 'dracula-magenta'
        printf %b '\e]PDff92df'    # redefine 'bright-magenta' as '#ff88e8'
        printf %b '\e]P68be9fd'    # redefine 'cyan'           as 'dracula-cyan'
        printf %b '\e]PEa4ffff'    # redefine 'bright-cyan'    as '#a4ffff'
        printf %b '\e]P7f8f8f2'    # redefine 'white'          as 'dracula-white'
        printf %b '\e]PFffffff'    # redefine 'bright-white'   as '#ffffff'
        clear
    fi
}

# Test tbsm to see what it looks like if there's a -t or --test-mode argument
if [[ -n $1 && $1 == @(-t|--test-mode) ]]; then
    # reset the terminal
    tput reset
    setTermColors
    # print the script banner
    printBanner
    # show the menu entries for user
    menuEntries
    # pass the desktop name or selected options to startDesktop function
    #echo "selected ${options[$choice]}"
    center " you selected \"${options[$choice]}\" item"
    #clear and change background page
    pageColor "$sysPageColor" "clear"
    exit
fi

# main commands
if [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]]; then
    # reset the terminal
    tput reset
    setTermColors
    # print the script banner
    printBanner
    # show the menu entries for user
    menuEntries
    # pass the desktop name or selected options to startDesktop function
    #echo "selected ${options[$choice]}"
    startDesktop ${options[$choice]}
else
    echo "Error : Another Xserver is running!, Abort."
    exit
fi
